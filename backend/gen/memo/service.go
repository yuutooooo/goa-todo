// Code generated by goa v3.20.0, DO NOT EDIT.
//
// memo service
//
// Command:
// $ goa gen backend/design

package memo

import (
	memoviews "backend/gen/memo/views"
	"context"
)

// メモ管理サービス
type Service interface {
	// 新規メモを作成します
	Create(context.Context, *CreatePayload) (res *MemoResult, err error)
	// タスクに関連するメモ一覧を取得します
	List(context.Context, *ListPayload) (res *MemoCollection, err error)
	// メモ詳細を取得します
	Get(context.Context, *GetPayload) (res *MemoResult, err error)
	// メモを更新します
	Update(context.Context, *UpdatePayload) (res *MemoResult, err error)
	// メモを削除します
	Delete(context.Context, *DeletePayload) (err error)
}

// APIName is the name of the API as defined in the design.
const APIName = "todo app"

// APIVersion is the version of the API as defined in the design.
const APIVersion = "0.0.1"

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "memo"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"create", "list", "get", "update", "delete"}

// エラーレスポンス
type APIErrorResult struct {
	// エラー名
	Name string
	// エラーメッセージ
	Message string
}

// CreatePayload is the payload type of the memo service create method.
type CreatePayload struct {
	// ユーザーID
	UserID int
	// タスクID
	TodoID int
	// メモの内容
	Content string
}

// DeletePayload is the payload type of the memo service delete method.
type DeletePayload struct {
	// ユーザーID
	UserID int
	// タスクID
	TodoID int
	// メモID
	MemoID int
}

// GetPayload is the payload type of the memo service get method.
type GetPayload struct {
	// ユーザーID
	UserID int
	// タスクID
	TodoID int
	// メモID
	MemoID int
}

// ListPayload is the payload type of the memo service list method.
type ListPayload struct {
	// ユーザーID
	UserID int
	// タスクID
	TodoID int
}

// MemoCollection is the result type of the memo service list method.
type MemoCollection struct {
	Items []*MemoResult
}

// MemoResult is the result type of the memo service create method.
type MemoResult struct {
	// メモのid
	ID int
	// タスクID
	TodoID int
	// メモの内容
	Content string
	// 作成日時
	CreatedAt string
	// 更新日時
	UpdatedAt string
}

// UpdatePayload is the payload type of the memo service update method.
type UpdatePayload struct {
	// ユーザーID
	UserID int
	// タスクID
	TodoID int
	// メモID
	MemoID int
	// メモの内容
	Content string
}

// Error returns an error description.
func (e *APIErrorResult) Error() string {
	return "エラーレスポンス"
}

// ErrorName returns "APIErrorResult".
//
// Deprecated: Use GoaErrorName - https://github.com/goadesign/goa/issues/3105
func (e *APIErrorResult) ErrorName() string {
	return e.GoaErrorName()
}

// GoaErrorName returns "APIErrorResult".
func (e *APIErrorResult) GoaErrorName() string {
	return e.Name
}

// NewMemoCollection initializes result type MemoCollection from viewed result
// type MemoCollection.
func NewMemoCollection(vres *memoviews.MemoCollection) *MemoCollection {
	return newMemoCollection(vres.Projected)
}

// NewViewedMemoCollection initializes viewed result type MemoCollection from
// result type MemoCollection using the given view.
func NewViewedMemoCollection(res *MemoCollection, view string) *memoviews.MemoCollection {
	p := newMemoCollectionView(res)
	return &memoviews.MemoCollection{Projected: p, View: "default"}
}

// newMemoCollection converts projected type MemoCollection to service type
// MemoCollection.
func newMemoCollection(vres *memoviews.MemoCollectionView) *MemoCollection {
	res := &MemoCollection{}
	if vres.Items != nil {
		res.Items = make([]*MemoResult, len(vres.Items))
		for i, val := range vres.Items {
			res.Items[i] = transformMemoviewsMemoResultViewToMemoResult(val)
		}
	}
	return res
}

// newMemoCollectionView projects result type MemoCollection to projected type
// MemoCollectionView using the "default" view.
func newMemoCollectionView(res *MemoCollection) *memoviews.MemoCollectionView {
	vres := &memoviews.MemoCollectionView{}
	if res.Items != nil {
		vres.Items = make([]*memoviews.MemoResultView, len(res.Items))
		for i, val := range res.Items {
			vres.Items[i] = transformMemoResultToMemoviewsMemoResultView(val)
		}
	}
	return vres
}

// transformMemoviewsMemoResultViewToMemoResult builds a value of type
// *MemoResult from a value of type *memoviews.MemoResultView.
func transformMemoviewsMemoResultViewToMemoResult(v *memoviews.MemoResultView) *MemoResult {
	if v == nil {
		return nil
	}
	res := &MemoResult{
		ID:        *v.ID,
		TodoID:    *v.TodoID,
		Content:   *v.Content,
		CreatedAt: *v.CreatedAt,
		UpdatedAt: *v.UpdatedAt,
	}

	return res
}

// transformMemoResultToMemoviewsMemoResultView builds a value of type
// *memoviews.MemoResultView from a value of type *MemoResult.
func transformMemoResultToMemoviewsMemoResultView(v *MemoResult) *memoviews.MemoResultView {
	if v == nil {
		return nil
	}
	res := &memoviews.MemoResultView{
		ID:        &v.ID,
		TodoID:    &v.TodoID,
		Content:   &v.Content,
		CreatedAt: &v.CreatedAt,
		UpdatedAt: &v.UpdatedAt,
	}

	return res
}
