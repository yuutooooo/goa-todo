// Code generated by goa v3.20.0, DO NOT EDIT.
//
// memo views
//
// Command:
// $ goa gen backend/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// MemoCollection is the viewed result type that is projected based on a view.
type MemoCollection struct {
	// Type to project
	Projected *MemoCollectionView
	// View to render
	View string
}

// MemoCollectionView is a type that runs validations on a projected type.
type MemoCollectionView struct {
	Items []*MemoResultView
}

// MemoResultView is a type that runs validations on a projected type.
type MemoResultView struct {
	// メモのid
	ID *int
	// タスクID
	TodoID *int
	// メモの内容
	Content *string
	// 作成日時
	CreatedAt *string
	// 更新日時
	UpdatedAt *string
}

var (
	// MemoCollectionMap is a map indexing the attribute names of MemoCollection by
	// view name.
	MemoCollectionMap = map[string][]string{
		"default": {
			"items",
		},
	}
)

// ValidateMemoCollection runs the validations defined on the viewed result
// type MemoCollection.
func ValidateMemoCollection(result *MemoCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateMemoCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateMemoCollectionView runs the validations defined on
// MemoCollectionView using the "default" view.
func ValidateMemoCollectionView(result *MemoCollectionView) (err error) {
	for _, e := range result.Items {
		if e != nil {
			if err2 := ValidateMemoResultView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateMemoResultView runs the validations defined on MemoResultView.
func ValidateMemoResultView(result *MemoResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.TodoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("todo_id", "result"))
	}
	if result.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	return
}
