// Code generated by goa v3.20.0, DO NOT EDIT.
//
// todo HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	todo "backend/gen/todo"
	todoviews "backend/gen/todo/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// UpdateRequestBody is the type of the "todo" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// CreateResponseBody is the type of the "todo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// タスクのid
	ID int `form:"id" json:"id" xml:"id"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// タスクの説明
	Description string `form:"description" json:"description" xml:"description"`
	// タスクが完了しているかどうか
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListResponseBody is the type of the "todo" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*TodoResultResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// GetResponseBody is the type of the "todo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// タスクのid
	ID int `form:"id" json:"id" xml:"id"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// タスクの説明
	Description string `form:"description" json:"description" xml:"description"`
	// タスクが完了しているかどうか
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// UpdateResponseBody is the type of the "todo" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// タスクのid
	ID int `form:"id" json:"id" xml:"id"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// タスクの説明
	Description string `form:"description" json:"description" xml:"description"`
	// タスクが完了しているかどうか
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CreateBadRequestResponseBody is the type of the "todo" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// GetNotFoundResponseBody is the type of the "todo" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateNotFoundResponseBody is the type of the "todo" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateBadRequestResponseBody is the type of the "todo" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteNotFoundResponseBody is the type of the "todo" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// TodoResultResponseBody is used to define fields on response body types.
type TodoResultResponseBody struct {
	// タスクのid
	ID int `form:"id" json:"id" xml:"id"`
	// ユーザーID
	UserID int `form:"user_id" json:"user_id" xml:"user_id"`
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// タスクの説明
	Description string `form:"description" json:"description" xml:"description"`
	// タスクが完了しているかどうか
	Completed bool `form:"completed" json:"completed" xml:"completed"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "todo" service.
func NewCreateResponseBody(res *todo.TodoResult) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          res.ID,
		UserID:      res.UserID,
		Title:       res.Title,
		Description: res.Description,
		Completed:   res.Completed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "todo" service.
func NewListResponseBody(res *todoviews.TodoCollectionView) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Items != nil {
		body.Items = make([]*TodoResultResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalTodoviewsTodoResultViewToTodoResultResponseBody(val)
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "todo" service.
func NewGetResponseBody(res *todo.TodoResult) *GetResponseBody {
	body := &GetResponseBody{
		ID:          res.ID,
		UserID:      res.UserID,
		Title:       res.Title,
		Description: res.Description,
		Completed:   res.Completed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "todo" service.
func NewUpdateResponseBody(res *todo.TodoResult) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          res.ID,
		UserID:      res.UserID,
		Title:       res.Title,
		Description: res.Description,
		Completed:   res.Completed,
		CreatedAt:   res.CreatedAt,
		UpdatedAt:   res.UpdatedAt,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "todo" service.
func NewCreateBadRequestResponseBody(res *todo.APIErrorResult) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "todo" service.
func NewGetNotFoundResponseBody(res *todo.APIErrorResult) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "todo" service.
func NewUpdateNotFoundResponseBody(res *todo.APIErrorResult) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "todo" service.
func NewUpdateBadRequestResponseBody(res *todo.APIErrorResult) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "todo" service.
func NewDeleteNotFoundResponseBody(res *todo.APIErrorResult) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewCreatePayload builds a todo service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, userID int) *todo.CreatePayload {
	v := &todo.CreatePayload{
		Title:       *body.Title,
		Description: *body.Description,
	}
	if body.Completed != nil {
		v.Completed = *body.Completed
	}
	if body.Completed == nil {
		v.Completed = false
	}
	v.UserID = userID

	return v
}

// NewListPayload builds a todo service list endpoint payload.
func NewListPayload(userID int, completed bool) *todo.ListPayload {
	v := &todo.ListPayload{}
	v.UserID = userID
	v.Completed = completed

	return v
}

// NewGetPayload builds a todo service get endpoint payload.
func NewGetPayload(userID int, todoID int) *todo.GetPayload {
	v := &todo.GetPayload{}
	v.UserID = userID
	v.TodoID = todoID

	return v
}

// NewUpdatePayload builds a todo service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, userID int, todoID int) *todo.UpdatePayload {
	v := &todo.UpdatePayload{
		Title:       body.Title,
		Description: body.Description,
		Completed:   body.Completed,
	}
	v.UserID = userID
	v.TodoID = todoID

	return v
}

// NewDeletePayload builds a todo service delete endpoint payload.
func NewDeletePayload(userID int, todoID int) *todo.DeletePayload {
	v := &todo.DeletePayload{}
	v.UserID = userID
	v.TodoID = todoID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 3, true))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Title != nil {
		if utf8.RuneCountInString(*body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
		}
	}
	if body.Description != nil {
		if utf8.RuneCountInString(*body.Description) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 3, true))
		}
	}
	return
}
