// Code generated by goa v3.20.0, DO NOT EDIT.
//
// todo HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	todo "backend/gen/todo"
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the todo create endpoint from CLI
// flags.
func BuildCreatePayload(todoCreateBody string, todoCreateUserID string) (*todo.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(todoCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"completed\": true,\n      \"description\": \"9d8\",\n      \"title\": \"z9z\"\n   }'")
		}
		if utf8.RuneCountInString(body.Title) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", body.Title, utf8.RuneCountInString(body.Title), 3, true))
		}
		if utf8.RuneCountInString(body.Description) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", body.Description, utf8.RuneCountInString(body.Description), 3, true))
		}
		if err != nil {
			return nil, err
		}
	}
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(todoCreateUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	v := &todo.CreatePayload{
		Title:       body.Title,
		Description: body.Description,
		Completed:   body.Completed,
	}
	{
		var zero bool
		if v.Completed == zero {
			v.Completed = false
		}
	}
	v.UserID = userID

	return v, nil
}

// BuildListPayload builds the payload for the todo list endpoint from CLI
// flags.
func BuildListPayload(todoListUserID string, todoListCompleted string) (*todo.ListPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(todoListUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	var completed bool
	{
		if todoListCompleted != "" {
			completed, err = strconv.ParseBool(todoListCompleted)
			if err != nil {
				return nil, fmt.Errorf("invalid value for completed, must be BOOL")
			}
		}
	}
	v := &todo.ListPayload{}
	v.UserID = userID
	v.Completed = completed

	return v, nil
}

// BuildGetPayload builds the payload for the todo get endpoint from CLI flags.
func BuildGetPayload(todoGetUserID string, todoGetTodoID string) (*todo.GetPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(todoGetUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	var todoID int
	{
		var v int64
		v, err = strconv.ParseInt(todoGetTodoID, 10, strconv.IntSize)
		todoID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for todoID, must be INT")
		}
	}
	v := &todo.GetPayload{}
	v.UserID = userID
	v.TodoID = todoID

	return v, nil
}

// BuildUpdatePayload builds the payload for the todo update endpoint from CLI
// flags.
func BuildUpdatePayload(todoUpdateBody string, todoUpdateUserID string, todoUpdateTodoID string) (*todo.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(todoUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"completed\": true,\n      \"description\": \"iua\",\n      \"title\": \"sfq\"\n   }'")
		}
		if body.Title != nil {
			if utf8.RuneCountInString(*body.Title) < 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.title", *body.Title, utf8.RuneCountInString(*body.Title), 3, true))
			}
		}
		if body.Description != nil {
			if utf8.RuneCountInString(*body.Description) < 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.description", *body.Description, utf8.RuneCountInString(*body.Description), 3, true))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(todoUpdateUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	var todoID int
	{
		var v int64
		v, err = strconv.ParseInt(todoUpdateTodoID, 10, strconv.IntSize)
		todoID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for todoID, must be INT")
		}
	}
	v := &todo.UpdatePayload{
		Title:       body.Title,
		Description: body.Description,
		Completed:   body.Completed,
	}
	v.UserID = userID
	v.TodoID = todoID

	return v, nil
}

// BuildDeletePayload builds the payload for the todo delete endpoint from CLI
// flags.
func BuildDeletePayload(todoDeleteUserID string, todoDeleteTodoID string) (*todo.DeletePayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(todoDeleteUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	var todoID int
	{
		var v int64
		v, err = strconv.ParseInt(todoDeleteTodoID, 10, strconv.IntSize)
		todoID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for todoID, must be INT")
		}
	}
	v := &todo.DeletePayload{}
	v.UserID = userID
	v.TodoID = todoID

	return v, nil
}
