// Code generated by goa v3.20.0, DO NOT EDIT.
//
// todo HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	todo "backend/gen/todo"
	todoviews "backend/gen/todo/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "todo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// タスクのタイトル
	Title string `form:"title" json:"title" xml:"title"`
	// タスクの説明
	Description string `form:"description" json:"description" xml:"description"`
	// タスクが完了しているかどうか
	Completed bool `form:"completed" json:"completed" xml:"completed"`
}

// UpdateRequestBody is the type of the "todo" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
}

// CreateResponseBody is the type of the "todo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// タスクのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザーID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListResponseBody is the type of the "todo" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*TodoResultResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// GetResponseBody is the type of the "todo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// タスクのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザーID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "todo" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// タスクのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザーID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "todo" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetNotFoundResponseBody is the type of the "todo" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "todo" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "todo" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "todo" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// TodoResultResponseBody is used to define fields on response body types.
type TodoResultResponseBody struct {
	// タスクのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// ユーザーID
	UserID *int `form:"user_id,omitempty" json:"user_id,omitempty" xml:"user_id,omitempty"`
	// タスクのタイトル
	Title *string `form:"title,omitempty" json:"title,omitempty" xml:"title,omitempty"`
	// タスクの説明
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// タスクが完了しているかどうか
	Completed *bool `form:"completed,omitempty" json:"completed,omitempty" xml:"completed,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "todo" service.
func NewCreateRequestBody(p *todo.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Completed:   p.Completed,
	}
	{
		var zero bool
		if body.Completed == zero {
			body.Completed = false
		}
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "todo" service.
func NewUpdateRequestBody(p *todo.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Title:       p.Title,
		Description: p.Description,
		Completed:   p.Completed,
	}
	return body
}

// NewCreateTodoResultCreated builds a "todo" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateTodoResultCreated(body *CreateResponseBody) *todo.TodoResult {
	v := &todo.TodoResult{
		ID:          *body.ID,
		UserID:      *body.UserID,
		Title:       *body.Title,
		Description: *body.Description,
		Completed:   *body.Completed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewCreateBadRequest builds a todo service create endpoint BadRequest error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *todo.APIErrorResult {
	v := &todo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewListTodoCollectionOK builds a "todo" service "list" endpoint result from
// a HTTP "OK" response.
func NewListTodoCollectionOK(body *ListResponseBody) *todoviews.TodoCollectionView {
	v := &todoviews.TodoCollectionView{}
	if body.Items != nil {
		v.Items = make([]*todoviews.TodoResultView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = unmarshalTodoResultResponseBodyToTodoviewsTodoResultView(val)
		}
	}

	return v
}

// NewGetTodoResultOK builds a "todo" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetTodoResultOK(body *GetResponseBody) *todo.TodoResult {
	v := &todo.TodoResult{
		ID:          *body.ID,
		UserID:      *body.UserID,
		Title:       *body.Title,
		Description: *body.Description,
		Completed:   *body.Completed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewGetNotFound builds a todo service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *todo.APIErrorResult {
	v := &todo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewUpdateTodoResultOK builds a "todo" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateTodoResultOK(body *UpdateResponseBody) *todo.TodoResult {
	v := &todo.TodoResult{
		ID:          *body.ID,
		UserID:      *body.UserID,
		Title:       *body.Title,
		Description: *body.Description,
		Completed:   *body.Completed,
		CreatedAt:   *body.CreatedAt,
		UpdatedAt:   *body.UpdatedAt,
	}

	return v
}

// NewUpdateNotFound builds a todo service update endpoint NotFound error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *todo.APIErrorResult {
	v := &todo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewUpdateBadRequest builds a todo service update endpoint BadRequest error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *todo.APIErrorResult {
	v := &todo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewDeleteNotFound builds a todo service delete endpoint NotFound error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *todo.APIErrorResult {
	v := &todo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_BadRequest_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_NotFound_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_BadRequest_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_NotFound_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateTodoResultResponseBody runs the validations defined on
// TodoResultResponseBody
func ValidateTodoResultResponseBody(body *TodoResultResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "body"))
	}
	if body.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "body"))
	}
	if body.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "body"))
	}
	if body.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}
