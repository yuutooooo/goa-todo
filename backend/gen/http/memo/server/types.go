// Code generated by goa v3.20.0, DO NOT EDIT.
//
// memo HTTP server types
//
// Command:
// $ goa gen backend/design

package server

import (
	memo "backend/gen/memo"
	memoviews "backend/gen/memo/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "memo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// UpdateRequestBody is the type of the "memo" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
}

// CreateResponseBody is the type of the "memo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// メモのid
	ID int `form:"id" json:"id" xml:"id"`
	// タスクID
	TodoID int `form:"todo_id" json:"todo_id" xml:"todo_id"`
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// ListResponseBody is the type of the "memo" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*MemoResultResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// GetResponseBody is the type of the "memo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// メモのid
	ID int `form:"id" json:"id" xml:"id"`
	// タスクID
	TodoID int `form:"todo_id" json:"todo_id" xml:"todo_id"`
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// UpdateResponseBody is the type of the "memo" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// メモのid
	ID int `form:"id" json:"id" xml:"id"`
	// タスクID
	TodoID int `form:"todo_id" json:"todo_id" xml:"todo_id"`
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// CreateBadRequestResponseBody is the type of the "memo" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// CreateNotFoundResponseBody is the type of the "memo" service "create"
// endpoint HTTP response body for the "NotFound" error.
type CreateNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// ListNotFoundResponseBody is the type of the "memo" service "list" endpoint
// HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// GetNotFoundResponseBody is the type of the "memo" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateNotFoundResponseBody is the type of the "memo" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// UpdateBadRequestResponseBody is the type of the "memo" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// DeleteNotFoundResponseBody is the type of the "memo" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// エラー名
	Name string `form:"name" json:"name" xml:"name"`
	// エラーメッセージ
	Message string `form:"message" json:"message" xml:"message"`
}

// MemoResultResponseBody is used to define fields on response body types.
type MemoResultResponseBody struct {
	// メモのid
	ID int `form:"id" json:"id" xml:"id"`
	// タスクID
	TodoID int `form:"todo_id" json:"todo_id" xml:"todo_id"`
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
	// 作成日時
	CreatedAt string `form:"created_at" json:"created_at" xml:"created_at"`
	// 更新日時
	UpdatedAt string `form:"updated_at" json:"updated_at" xml:"updated_at"`
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "create" endpoint of the "memo" service.
func NewCreateResponseBody(res *memo.MemoResult) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:        res.ID,
		TodoID:    res.TodoID,
		Content:   res.Content,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "list" endpoint of the "memo" service.
func NewListResponseBody(res *memoviews.MemoCollectionView) *ListResponseBody {
	body := &ListResponseBody{}
	if res.Items != nil {
		body.Items = make([]*MemoResultResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalMemoviewsMemoResultViewToMemoResultResponseBody(val)
		}
	}
	return body
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "get" endpoint of the "memo" service.
func NewGetResponseBody(res *memo.MemoResult) *GetResponseBody {
	body := &GetResponseBody{
		ID:        res.ID,
		TodoID:    res.TodoID,
		Content:   res.Content,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "update" endpoint of the "memo" service.
func NewUpdateResponseBody(res *memo.MemoResult) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:        res.ID,
		TodoID:    res.TodoID,
		Content:   res.Content,
		CreatedAt: res.CreatedAt,
		UpdatedAt: res.UpdatedAt,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "create" endpoint of the "memo" service.
func NewCreateBadRequestResponseBody(res *memo.APIErrorResult) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewCreateNotFoundResponseBody builds the HTTP response body from the result
// of the "create" endpoint of the "memo" service.
func NewCreateNotFoundResponseBody(res *memo.APIErrorResult) *CreateNotFoundResponseBody {
	body := &CreateNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewListNotFoundResponseBody builds the HTTP response body from the result of
// the "list" endpoint of the "memo" service.
func NewListNotFoundResponseBody(res *memo.APIErrorResult) *ListNotFoundResponseBody {
	body := &ListNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewGetNotFoundResponseBody builds the HTTP response body from the result of
// the "get" endpoint of the "memo" service.
func NewGetNotFoundResponseBody(res *memo.APIErrorResult) *GetNotFoundResponseBody {
	body := &GetNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewUpdateNotFoundResponseBody builds the HTTP response body from the result
// of the "update" endpoint of the "memo" service.
func NewUpdateNotFoundResponseBody(res *memo.APIErrorResult) *UpdateNotFoundResponseBody {
	body := &UpdateNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "update" endpoint of the "memo" service.
func NewUpdateBadRequestResponseBody(res *memo.APIErrorResult) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewDeleteNotFoundResponseBody builds the HTTP response body from the result
// of the "delete" endpoint of the "memo" service.
func NewDeleteNotFoundResponseBody(res *memo.APIErrorResult) *DeleteNotFoundResponseBody {
	body := &DeleteNotFoundResponseBody{
		Name:    res.Name,
		Message: res.Message,
	}
	return body
}

// NewCreatePayload builds a memo service create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, userID int, todoID int) *memo.CreatePayload {
	v := &memo.CreatePayload{
		Content: *body.Content,
	}
	v.UserID = userID
	v.TodoID = todoID

	return v
}

// NewListPayload builds a memo service list endpoint payload.
func NewListPayload(userID int, todoID int) *memo.ListPayload {
	v := &memo.ListPayload{}
	v.UserID = userID
	v.TodoID = todoID

	return v
}

// NewGetPayload builds a memo service get endpoint payload.
func NewGetPayload(userID int, todoID int, memoID int) *memo.GetPayload {
	v := &memo.GetPayload{}
	v.UserID = userID
	v.TodoID = todoID
	v.MemoID = memoID

	return v
}

// NewUpdatePayload builds a memo service update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, userID int, todoID int, memoID int) *memo.UpdatePayload {
	v := &memo.UpdatePayload{
		Content: *body.Content,
	}
	v.UserID = userID
	v.TodoID = todoID
	v.MemoID = memoID

	return v
}

// NewDeletePayload builds a memo service delete endpoint payload.
func NewDeletePayload(userID int, todoID int, memoID int) *memo.DeletePayload {
	v := &memo.DeletePayload{}
	v.UserID = userID
	v.TodoID = todoID
	v.MemoID = memoID

	return v
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 3, true))
		}
	}
	return
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.Content != nil {
		if utf8.RuneCountInString(*body.Content) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.content", *body.Content, utf8.RuneCountInString(*body.Content), 3, true))
		}
	}
	return
}
