// Code generated by goa v3.20.0, DO NOT EDIT.
//
// memo HTTP client types
//
// Command:
// $ goa gen backend/design

package client

import (
	memo "backend/gen/memo"
	memoviews "backend/gen/memo/views"

	goa "goa.design/goa/v3/pkg"
)

// CreateRequestBody is the type of the "memo" service "create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
}

// UpdateRequestBody is the type of the "memo" service "update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// メモの内容
	Content string `form:"content" json:"content" xml:"content"`
}

// CreateResponseBody is the type of the "memo" service "create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// メモのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タスクID
	TodoID *int `form:"todo_id,omitempty" json:"todo_id,omitempty" xml:"todo_id,omitempty"`
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// ListResponseBody is the type of the "memo" service "list" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*MemoResultResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
}

// GetResponseBody is the type of the "memo" service "get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// メモのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タスクID
	TodoID *int `form:"todo_id,omitempty" json:"todo_id,omitempty" xml:"todo_id,omitempty"`
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// UpdateResponseBody is the type of the "memo" service "update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// メモのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タスクID
	TodoID *int `form:"todo_id,omitempty" json:"todo_id,omitempty" xml:"todo_id,omitempty"`
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "memo" service "create"
// endpoint HTTP response body for the "BadRequest" error.
type CreateBadRequestResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// CreateNotFoundResponseBody is the type of the "memo" service "create"
// endpoint HTTP response body for the "NotFound" error.
type CreateNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// ListNotFoundResponseBody is the type of the "memo" service "list" endpoint
// HTTP response body for the "NotFound" error.
type ListNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// GetNotFoundResponseBody is the type of the "memo" service "get" endpoint
// HTTP response body for the "NotFound" error.
type GetNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateNotFoundResponseBody is the type of the "memo" service "update"
// endpoint HTTP response body for the "NotFound" error.
type UpdateNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "memo" service "update"
// endpoint HTTP response body for the "BadRequest" error.
type UpdateBadRequestResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// DeleteNotFoundResponseBody is the type of the "memo" service "delete"
// endpoint HTTP response body for the "NotFound" error.
type DeleteNotFoundResponseBody struct {
	// エラー名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// エラーメッセージ
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
}

// MemoResultResponseBody is used to define fields on response body types.
type MemoResultResponseBody struct {
	// メモのid
	ID *int `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// タスクID
	TodoID *int `form:"todo_id,omitempty" json:"todo_id,omitempty" xml:"todo_id,omitempty"`
	// メモの内容
	Content *string `form:"content,omitempty" json:"content,omitempty" xml:"content,omitempty"`
	// 作成日時
	CreatedAt *string `form:"created_at,omitempty" json:"created_at,omitempty" xml:"created_at,omitempty"`
	// 更新日時
	UpdatedAt *string `form:"updated_at,omitempty" json:"updated_at,omitempty" xml:"updated_at,omitempty"`
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "create" endpoint of the "memo" service.
func NewCreateRequestBody(p *memo.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Content: p.Content,
	}
	return body
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "update" endpoint of the "memo" service.
func NewUpdateRequestBody(p *memo.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		Content: p.Content,
	}
	return body
}

// NewCreateMemoResultCreated builds a "memo" service "create" endpoint result
// from a HTTP "Created" response.
func NewCreateMemoResultCreated(body *CreateResponseBody) *memo.MemoResult {
	v := &memo.MemoResult{
		ID:        *body.ID,
		TodoID:    *body.TodoID,
		Content:   *body.Content,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: *body.UpdatedAt,
	}

	return v
}

// NewCreateBadRequest builds a memo service create endpoint BadRequest error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewCreateNotFound builds a memo service create endpoint NotFound error.
func NewCreateNotFound(body *CreateNotFoundResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewListMemoCollectionOK builds a "memo" service "list" endpoint result from
// a HTTP "OK" response.
func NewListMemoCollectionOK(body *ListResponseBody) *memoviews.MemoCollectionView {
	v := &memoviews.MemoCollectionView{}
	if body.Items != nil {
		v.Items = make([]*memoviews.MemoResultView, len(body.Items))
		for i, val := range body.Items {
			v.Items[i] = unmarshalMemoResultResponseBodyToMemoviewsMemoResultView(val)
		}
	}

	return v
}

// NewListNotFound builds a memo service list endpoint NotFound error.
func NewListNotFound(body *ListNotFoundResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewGetMemoResultOK builds a "memo" service "get" endpoint result from a HTTP
// "OK" response.
func NewGetMemoResultOK(body *GetResponseBody) *memo.MemoResult {
	v := &memo.MemoResult{
		ID:        *body.ID,
		TodoID:    *body.TodoID,
		Content:   *body.Content,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: *body.UpdatedAt,
	}

	return v
}

// NewGetNotFound builds a memo service get endpoint NotFound error.
func NewGetNotFound(body *GetNotFoundResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewUpdateMemoResultOK builds a "memo" service "update" endpoint result from
// a HTTP "OK" response.
func NewUpdateMemoResultOK(body *UpdateResponseBody) *memo.MemoResult {
	v := &memo.MemoResult{
		ID:        *body.ID,
		TodoID:    *body.TodoID,
		Content:   *body.Content,
		CreatedAt: *body.CreatedAt,
		UpdatedAt: *body.UpdatedAt,
	}

	return v
}

// NewUpdateNotFound builds a memo service update endpoint NotFound error.
func NewUpdateNotFound(body *UpdateNotFoundResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewUpdateBadRequest builds a memo service update endpoint BadRequest error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// NewDeleteNotFound builds a memo service delete endpoint NotFound error.
func NewDeleteNotFound(body *DeleteNotFoundResponseBody) *memo.APIErrorResult {
	v := &memo.APIErrorResult{
		Name:    *body.Name,
		Message: *body.Message,
	}

	return v
}

// ValidateCreateResponseBody runs the validations defined on CreateResponseBody
func ValidateCreateResponseBody(body *CreateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TodoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("todo_id", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateGetResponseBody runs the validations defined on GetResponseBody
func ValidateGetResponseBody(body *GetResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TodoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("todo_id", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateUpdateResponseBody runs the validations defined on UpdateResponseBody
func ValidateUpdateResponseBody(body *UpdateResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TodoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("todo_id", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// create_BadRequest_response_body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateCreateNotFoundResponseBody runs the validations defined on
// create_NotFound_response_body
func ValidateCreateNotFoundResponseBody(body *CreateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateListNotFoundResponseBody runs the validations defined on
// list_NotFound_response_body
func ValidateListNotFoundResponseBody(body *ListNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateGetNotFoundResponseBody runs the validations defined on
// get_NotFound_response_body
func ValidateGetNotFoundResponseBody(body *GetNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateNotFoundResponseBody runs the validations defined on
// update_NotFound_response_body
func ValidateUpdateNotFoundResponseBody(body *UpdateNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// update_BadRequest_response_body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateDeleteNotFoundResponseBody runs the validations defined on
// delete_NotFound_response_body
func ValidateDeleteNotFoundResponseBody(body *DeleteNotFoundResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	return
}

// ValidateMemoResultResponseBody runs the validations defined on
// MemoResultResponseBody
func ValidateMemoResultResponseBody(body *MemoResultResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.TodoID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("todo_id", "body"))
	}
	if body.Content == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("content", "body"))
	}
	if body.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "body"))
	}
	if body.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "body"))
	}
	return
}
