// Code generated by goa v3.20.0, DO NOT EDIT.
//
// user HTTP client CLI support package
//
// Command:
// $ goa gen backend/design

package client

import (
	user "backend/gen/user"
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildCreatePayload builds the payload for the user create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string) (*user.User, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"helen_reichert@wuckertroberts.name\",\n      \"name\": \"0qc\",\n      \"password\": \"66a\"\n   }'")
		}
		if utf8.RuneCountInString(body.Name) < 3 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", body.Name, utf8.RuneCountInString(body.Name), 3, true))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))
		if utf8.RuneCountInString(body.Password) < 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 8, true))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &user.User{
		Name:     body.Name,
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildLoginPayload builds the payload for the user login endpoint from CLI
// flags.
func BuildLoginPayload(userLoginBody string) (*user.LoginPayload, error) {
	var err error
	var body LoginRequestBody
	{
		err = json.Unmarshal([]byte(userLoginBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"Rerum ipsam id eius ea ducimus.\",\n      \"password\": \"Molestias at.\"\n   }'")
		}
	}
	v := &user.LoginPayload{
		Email:    body.Email,
		Password: body.Password,
	}

	return v, nil
}

// BuildGetPayload builds the payload for the user get endpoint from CLI flags.
func BuildGetPayload(userGetUserID string) (*user.GetPayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(userGetUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	v := &user.GetPayload{}
	v.UserID = userID

	return v, nil
}

// BuildUpdatePayload builds the payload for the user update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateBody string, userUpdateUserID string) (*user.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"damon.hahn@morar.org\",\n      \"name\": \"knj\"\n   }'")
		}
		if body.Name != nil {
			if utf8.RuneCountInString(*body.Name) < 3 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.name", *body.Name, utf8.RuneCountInString(*body.Name), 3, true))
			}
		}
		if body.Email != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.email", *body.Email, goa.FormatEmail))
		}
		if err != nil {
			return nil, err
		}
	}
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(userUpdateUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	v := &user.UpdatePayload{
		Name:  body.Name,
		Email: body.Email,
	}
	v.UserID = userID

	return v, nil
}

// BuildDeletePayload builds the payload for the user delete endpoint from CLI
// flags.
func BuildDeletePayload(userDeleteUserID string) (*user.DeletePayload, error) {
	var err error
	var userID int
	{
		var v int64
		v, err = strconv.ParseInt(userDeleteUserID, 10, strconv.IntSize)
		userID = int(v)
		if err != nil {
			return nil, fmt.Errorf("invalid value for userID, must be INT")
		}
	}
	v := &user.DeletePayload{}
	v.UserID = userID

	return v, nil
}
