// Code generated by goa v3.20.0, DO NOT EDIT.
//
// todo views
//
// Command:
// $ goa gen backend/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// TodoCollection is the viewed result type that is projected based on a view.
type TodoCollection struct {
	// Type to project
	Projected *TodoCollectionView
	// View to render
	View string
}

// TodoCollectionView is a type that runs validations on a projected type.
type TodoCollectionView struct {
	Items []*TodoResultView
}

// TodoResultView is a type that runs validations on a projected type.
type TodoResultView struct {
	// タスクのid
	ID *int
	// ユーザーID
	UserID *int
	// タスクのタイトル
	Title *string
	// タスクの説明
	Description *string
	// タスクが完了しているかどうか
	Completed *bool
	// 作成日時
	CreatedAt *string
	// 更新日時
	UpdatedAt *string
}

var (
	// TodoCollectionMap is a map indexing the attribute names of TodoCollection by
	// view name.
	TodoCollectionMap = map[string][]string{
		"default": {
			"items",
		},
	}
)

// ValidateTodoCollection runs the validations defined on the viewed result
// type TodoCollection.
func ValidateTodoCollection(result *TodoCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateTodoCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []any{"default"})
	}
	return
}

// ValidateTodoCollectionView runs the validations defined on
// TodoCollectionView using the "default" view.
func ValidateTodoCollectionView(result *TodoCollectionView) (err error) {
	for _, e := range result.Items {
		if e != nil {
			if err2 := ValidateTodoResultView(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateTodoResultView runs the validations defined on TodoResultView.
func ValidateTodoResultView(result *TodoResultView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.UserID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("user_id", "result"))
	}
	if result.Title == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("title", "result"))
	}
	if result.Description == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("description", "result"))
	}
	if result.Completed == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("completed", "result"))
	}
	if result.CreatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("created_at", "result"))
	}
	if result.UpdatedAt == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("updated_at", "result"))
	}
	return
}
